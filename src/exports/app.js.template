const target = %target%;
import * as Vue from 'vue';
import Icon from 'virtual:balafon-iconslib';
import libicons from 'virtual:balafon-libicons';
// + | direct incocation inclusion 
import 'virtual:balafon-corejs';
import 'virtual:balafon-corecss';
// + | ----------------------------------
// + | inject vue to global value entries
// + |
if (typeof(globalThis.Vue)=='undefined'){
    globalThis.Vue = Vue;
}  
if (globalThis.igk){
    globalThis.igk.Vue = Vue;
}
/**
 * initialize application
 * @param app 
 * @param auto_mount 
 * @returns 
 */
function _init_app(app, auto_mount){
    if (libicons){      
        // console.log("the icons ", libicons) 
        app.provide('lib/icons', {default: 'ionicons', libicons});   
    }
    app.component('Icon', Icon) 
    if (auto_mount && target){
        app.mount(target);
    }
    return app;
}
/**
 * create app 
 * @param app 
 * @param option 
 * @returns 
 */
const createApp = (app, option, auto_mount )=>{ 
    const { createApp } = Vue; 
    auto_mount = auto_mount !== false;
    let _tapp = createApp(app, option);  
    return _init_app(_tapp, auto_mount);
};

/**
 * encapsulate create ssr app 
 * @param app 
 * @param option 
 * @returns 
 */
const createSSRApp = (app, option, auto_mount)=>{
    const { createSSRApp } = Vue;
    auto_mount = auto_mount !== false;
    let _tapp = createSSRApp(app, option);   
    return _init_app(_tapp, auto_mount);
}

export default (()=>{
    return {
        createApp,
        createSSRApp
    };
})() 


export { createApp, createSSRApp } 