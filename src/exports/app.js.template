const target = %target%;
import * as Vue from 'vue'; 

import Icon from 'virtual:balafon-iconslib';
import Logo from 'virtual:balafon-logo';
import libicons from 'virtual:balafon-libicons';
import Components from 'virtual:balafon-ssr-components';
// // + | direct core balafon inclusion 
import 'virtual:balafon-corejs'; // raise error on safari
import 'virtual:balafon-corecss';
%header-extra-import% 
// + | ----------------------------------
// + | inject vue to global value entries
// + |
if (typeof(globalThis.Vue)=='undefined'){
    globalThis.Vue = Vue;
}  
if (globalThis.igk){
    globalThis.igk.Vue = Vue;
}
const _uses = [];
/**
 * initialize application
 * @param {*} app 
 * @param {boolean} auto_mount 
 * @returns 
 */
function _init_app(app, auto_mount){
    if (libicons){      
        app.provide('lib/icons', {default: 'ionicons', libicons});   
    }
    %plugin-use%   
    if (_uses.length>0){ 
        _uses.forEach(i=>app.use(i));
    }
    app.component('Icon', Icon) 
    app.component('Logo', Logo) 
    if (Components){
        ((c)=>{for(let i in c){if(/\b(Icon|Logo)\b/.test(i))continue;app.component(i,c[i]);}})(Components)
    }
    if (auto_mount && target){ 
        app.mount(typeof(auto_mount) =='string'? auto_mount :target);
    }
    return app;
}
/**
 * create app 
 * @param {*} app component 
 * @param {*} option initialize option 
 * @param {*|boolean|String} auto_mount auto mounting 
 * @param option 
 * @returns 
 */
const createApp = (app, option, auto_mount)=>{ 
    const { createApp } = Vue;  
    let _tapp = createApp(app, option);  
    return _init_app(_tapp, auto_mount);
};

/**
 * encapsulate create ssr app 
 * @param {*} app 
 * @param {*} option 
 * @param {*|boolean|String} auto_mount auto mounting 
 * @returns 
 */
const createSSRApp = (app, option, auto_mount)=>{
    const { createSSRApp } = Vue; 
    let _tapp = createSSRApp(app, option);   
    return _init_app(_tapp, auto_mount);
}
const _use_call = function(a){ return (i)=>{return _uses.push(i), a;};};
Object.defineProperty(createApp, 'use', {get(){ return _use_call(createApp);}});
Object.defineProperty(createSSRApp, 'use', {get(){ return _use_call(createSSRApp);}}); 

export default (()=>{
    return {
        createApp,
        createSSRApp
    };
})() 
 

export { createApp, createSSRApp } 